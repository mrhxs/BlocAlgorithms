
1. 
Time complexity is how long it takes to execute a program. It's determined by calculateing how quickly the
time to run the program grows relative to the amount of inputs.

2. 
Runtime is the physical time duration of an algorithm. 

3. 
The most common metric for calculating runtime is Big O notation. This removes all constant factors and
run time can be estimated in relation to N, as N approaches infinity. 
A. Add how many instruction the algorith will run
B. Simplify the expression to the largets term
C. Constants are dropped

4. 
O(1) = Constant Growth Rate
O(log n) = Logarithmic Growth Rate
O(n) = Linear Growth Rate
O(n log n) = Log-Linear Growth Rate
O(n^2) = Quadratic Growth Rate
O(n^3) = Cubic Growth Rate
O(2^n) = Exponential Growth Rate

5. 
Constant Growth Rate - If students are taking a final exam the exam will take the same amount of time 
no matter the amount of students taking the test. 

6.
FUNCTION linearSearch(array, target)
 FOR each number in the array 
   IF number = target THEN     
     RETURN true	 
   END IF
 END FOR
 RETURN false
END FUNCTION

O(n)

7.

FUNCTION foo(array)
 FOR each number in the array      
   FOR each number in the array
     print "Hello"                 
   END FOR
 END FOR
END FUNCTION

O(n^2)

8.

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

O(2^n)

9. The linear search function would be the most time efficient. 0(n)